/*
The following code is generated by GPT4 with the prompt
---
Write an unit test for the following code and refer to the comments
1. The mock Storage can be implemented with map
2. The mock Process can be implmeneted as reversing the input,
3. Check the process,  that a string be processed with method "Process",  and then retrive by "Retrive" with the token.
---
*/

package toy_test

import (
	"testing"

	"github.com/chaocai2001/writing_testable_program"
)

type MockStorage struct {
	data map[string]string
}

type MockProcessor struct{}
type MockTokenCreator struct{}

func (ms *MockStorage) RetiveData(token string) (string, error) {
	return ms.data[token], nil
}

func (ms *MockStorage) StoreData(token string, data string) error {
	ms.data[token] = data
	return nil
}

func (mp *MockProcessor) Process(raw string) (string, error) {
	processed := ""
	for _, r := range raw {
		processed = string(r) + processed
	}
	return processed, nil
}

func (mtc *MockTokenCreator) CreateToken(data string) string {
	return data
}

func TestProcessingService_ProcessAndRetrive(t *testing.T) {
	mockStorage := &MockStorage{data: make(map[string]string)}
	mockProcessor := &MockProcessor{}
	mockTokenCreator := &MockTokenCreator{}

	processingService := toy.NewProcessingService(mockProcessor, mockTokenCreator, mockStorage)

	rawData := "rawData"
	processedData, _ := mockProcessor.Process(rawData)
	token, err := processingService.Process(rawData)
	if err != nil {
		t.Errorf("Process() error = %v", err)
		return
	}

	if token != processedData {
		t.Errorf("Process() token = %v, want %v", token, processedData)
	}

	retrivedData, err := processingService.Retrive(token)
	if err != nil {
		t.Errorf("Retrive() error = %v", err)
		return
	}

	if retrivedData != processedData {
		t.Errorf("Retrive() data = %v, want %v", retrivedData, processedData)
	}
}
